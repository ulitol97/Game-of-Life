{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","createEmptyGrid","rows","i","push","Array","from","operations","App","useState","grid","setGrid","Stopped","gameState","setGameState","step","setStep","gameStateRef","useRef","current","stepRef","useEffect","stopSimulation","Running","runSimulation","useCallback","currentGrid","produce","draftGrid","j","neighbors","forEach","operation","newI","newJ","setTimeout","id","className","onClick","disabled","Paused","Math","random","createRandomGrid","style","display","gridTemplateColumns","map","row","col","key","newGrid","width","height","backgroundColor","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38724e5a.chunk.js","sourcesContent":["import produce from 'immer';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\n\n// Config\nconst numRows = 30;\nconst numCols = 50;\nconst stepTimeout = 250;\nconst randomizeProbability = 0.5;\n\n// Function to create the template grid data structure\nconst createEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst createRandomGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => Math.random() >= randomizeProbability ? 1 : 0));\n  }\n\n  return rows;\n};\n\n// Helper structure to compute the neighbors of each cell\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, 0],\n  [-1, 0],\n  [1, -1],\n  [1, 1],\n  [-1, -1],\n  [-1, 1]\n]\n\nenum GameState {\n  Stopped,\n  Paused,\n  Running,\n}\n\nconst App: React.FC = () => {\n\n  // State\n  const [grid, setGrid] = useState(() => { return createEmptyGrid() });\n  const [gameState, setGameState] = useState(GameState.Stopped);\n  let [step, setStep] = useState(0);\n\n  // Refs\n  const gameStateRef = useRef(gameState);\n  gameStateRef.current = gameState;\n\n  const stepRef = useRef(step);\n  stepRef.current = step;\n\n  // Trigger corresponding actions when simulation is started/stopped\n  useEffect(() => {\n\n    if (gameState === GameState.Stopped) stopSimulation()\n    else if (gameState === GameState.Running) runSimulation()\n\n  }, [gameState])\n\n\n  // UseCallback to create the function only one\n  const runSimulation = useCallback(() => {\n\n    const gameState = gameStateRef.current;\n    if (gameState !== GameState.Running) return;\n\n    // Simulate current step\n    setGrid(currentGrid => {\n      return produce(currentGrid, draftGrid => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n\n            let neighbors = 0;\n\n            operations.forEach(operation => {\n              const newI = i + operation[0];\n              const newJ = j + operation[1];\n\n              // Check bounds\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += currentGrid[newI][newJ];\n              }\n            });\n\n            // Game logic\n            if (neighbors < 2 || neighbors > 3) draftGrid[i][j] = 0;\n            else if (currentGrid[i][j] === 0 && neighbors === 3) draftGrid[i][j] = 1;\n\n          }\n        }\n      })\n    })\n\n    // Invoke next step\n    setStep(stepRef.current += 1);\n    setTimeout(runSimulation, stepTimeout);\n  }, [])\n\n  const stopSimulation = useCallback(() => {\n\n    setGrid(createEmptyGrid());\n    setStep(0);\n\n  }, []);\n\n  return (\n    <div id=\"main\">\n      <div className=\"controls\">\n        <button\n          onClick={() => {\n            if (gameState === GameState.Stopped) setGameState(GameState.Running)\n            else setGameState(GameState.Stopped)\n          }}\n        >\n          {gameState === GameState.Stopped ? 'Start' : 'Stop'}\n        </button>\n        <button disabled={gameState === GameState.Stopped}\n          onClick={() => {\n            if (gameState !== GameState.Paused) setGameState(GameState.Paused);\n            else setGameState(GameState.Running);\n          }}\n        >\n          {gameState === GameState.Paused ? 'Resume' : 'Pause'}\n      </button>\n        <button disabled={gameState !== GameState.Stopped}\n          onClick={() => setGrid(createRandomGrid())}>\n          Randomize\n      </button>\n        <button disabled={gameState === GameState.Running}\n          onClick={() => setGrid(createEmptyGrid())}\n        >\n          Clear\n      </button>\n\n        <pre>Current step: {step}</pre>\n      </div>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}>\n        {grid.map((row, i) =>\n          row.map((col, j) =>\n            <div\n              key={`${i}-${j}`} // Unique key based on cell position\n              onClick={() => { // Toggle cell on click\n                if (gameState === GameState.Running) return;\n\n                const newGrid = produce(grid, draftGrid => {\n                  draftGrid[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20, height: 20,\n                backgroundColor: grid[i][j] === 1 ? 'lightskyblue' : 'white',\n                border: 'solid 1px black'\n              }}>\n\n            </div>))}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}